---
##ansible-playbook myria.yml "-e KEY_NAME=parmita-keypair"
- name: Create AWS resources
  hosts: localhost
  gather_facts: False
  vars:
    key_name: "{{ KEY_NAME }}"
    instance_type: t2.large
    instance_count: 5
    security_group: default
    image: ami-5189a661
    region: us-west-2
    wait_timeout: 600
  tasks:
  - name: Create security group  #so we can ssh into the instance from our laptop
    ec2_group:
      name: myriasec
      description: "Myria security group"
      region: "{{region}}"
      rules:
      - proto: all
        from_port: 0
        to_port: 65535
        group_name: myriasec
      - proto: tcp
        type: ssh
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: http
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: https
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: myria
        from_port: "{{myria_rest_port}}"
        to_port: "{{myria_rest_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: myria-web
        from_port: "{{myria_web_port}}"
        to_port: "{{myria_web_port}}"
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: resourcemanager-ui
        from_port: 8088
        to_port: 8088
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        type: nodemanager-ui
        from_port: 8042
        to_port: 8042
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: all
        type: all
        cidr_ip: 0.0.0.0/0
    register: basic_firewall

  - name: Launch instance
    ec2:
      keypair: "{{key_name}}"
      group_id: "{{basic_firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{image}}"
      count: "{{instance_count}}"
      wait: true
      wait_timeout: "{{wait_timeout}}"
      region: "{{region}}"
      instance_tags:
        Name: "{{ lookup('env', 'USER') }}-{{ key_name }}"
      volumes:
      - device_name: /dev/sdb
        volume_size: 20
        delete_on_termination: true
    register: ec2

  - name: Add new instances to host group
    add_host: hostname={{item.public_ip}} groupname=nodes
    with_items: ec2.instances

  - name: Add first instance to coordinators group
    add_host: hostname={{item.public_ip}} groupname=coordinators
    with_items: ec2.instances[:1]

  - name: Add first instance to rmnode group
    add_host: hostname={{item.public_ip}} groupname=rmnode
    with_items: ec2.instances[:1]

  - name: Add first instance to rmnode_private group
    add_host: hostname={{item.private_ip}} groupname=rmnode_private
    with_items: ec2.instances[:1]

  - name: Add first instance to ganglia_master group
    add_host: hostname={{item.private_ip}} groupname=ganglia_master
    with_items: ec2.instances[:1]

  - name: Add remaining instances to workers group
    add_host: hostname={{item.public_ip}} groupname=workers
    with_items: ec2.instances[1:]

  - name: Add all instances to nmnodes group
    add_host: hostname={{item.public_ip}} groupname=nmnodes
    with_items: ec2.instances

  - name: Add all instances to nmnodes_private group
    add_host: hostname={{item.private_ip}} groupname=nmnodes_private
    with_items: ec2.instances

  - add_host: hostname={{item.dns_name}} groupname=coordinator_name
    with_items: ec2.instances[:1]

  - add_host: hostname={{item.dns_name}} groupname=worker_names
    with_items: ec2.instances[1:]

  - add_host: hostname={{item.private_dns_name}} groupname=coordinator_private_name
    with_items: ec2.instances[:1]

  - add_host: hostname={{item.private_dns_name}} groupname=worker_private_names
    with_items: ec2.instances[1:]

  - name: Wait for SSH to come up
    local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: ec2.instances

- name: Configure common functionality on all nodes
  hosts: nodes    
  remote_user: ubuntu
  sudo: yes
  gather_facts: true
  roles:
    - basenode
    - yarn-common
    - postgres
    # - ganglia-client

- name: Configure YARN RM
  hosts: rmnode
  remote_user: ubuntu
  sudo: yes
  gather_facts: false
  roles:
    - yarn-rm

- name: Configure YARN NM
  hosts: nmnodes
  remote_user: ubuntu
  sudo: yes
  gather_facts: false
  roles:
    - yarn-nm

- name: Configure and launch MyriaX on coordinator
  hosts: coordinators
  remote_user: ubuntu
  sudo: yes
  gather_facts: false
  roles:
    - myria-python
    # - ganglia
    - myria

- name: Install and launch myria-web on coordinator
  hosts: coordinators
  remote_user: ubuntu
  sudo: yes
  gather_facts: false
  roles:
    - gae
    - myria-web

- name: display URL of remote myria-web instance
  hosts: localhost
  tasks:
    - debug: msg="http://{{ hostvars[groups['coordinator_name'][0]]['inventory_hostname'] }}:{{ myria_web_port }}"

