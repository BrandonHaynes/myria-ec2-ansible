---
#installing myria in ec2 with ansible
#install ansible on a local( controller machine), replace key name with your ec2 key
#
#ansible-playbook myria.yml "-e KEY_NAME=parmita-keypair" 
# 

- name: Create AWS resources
  hosts: localhost
  gather_facts: False
  vars:
    key_name: "{{ KEY_NAME|default(defaultkey) }}"
    instance_type: m1.small
    instance_count: 2
    security_group: default
    image: ami-6989a659
    region: us-west-2
    wait_timeout: 600
    new_pub_key: ~/.ssh/id_rsa_new.pub
    new_priv_key: ~/.ssh/id_rsa_new
  tasks:
  - name: Create security group  #so we can ssh into the instance from our laptop
    ec2_group:
      name: myriasec
      description: "A Security group"
      region: "{{region}}"
      rules:
      - proto: tcp
        type: ssh
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: all
        type: all
        cidr_ip: 0.0.0.0/0
    register: basic_firewall

  - name: Launch instance
    ec2:
      keypair: "{{key_name}}"
      group_id: "{{basic_firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{image}}"
      count: "{{instance_count}}"
      wait: true
      wait_timeout: "{{wait_timeout}}"
      region: "{{region}}"
      instance_tags:
        Name: "{{ lookup('env', 'USER') }}-{{ key_name }}"
    register: ec2

  - name: Add new instances to host group
    add_host: hostname={{item.public_ip}} groupname=nodes
    with_items: ec2.instances

  - name: Add first instance to coordinators group
    add_host: hostname={{item.public_ip}} groupname=coordinators
    with_items: ec2.instances[:1]

  - name: Add remaining instance to workers group
    add_host: hostname={{item.public_ip}} groupname=workers
    with_items: ec2.instances

  - add_host: hostname={{item.dns_name}} groupname=coordinator_name
    with_items: ec2.instances[:1]

  - add_host: hostname={{item.dns_name}} groupname=worker_names
    with_items: ec2.instances[1:]

  - name: Wait for SSH to come up
    local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: ec2.instances

  - name: Create a volume and attach
    ec2_vol:
      volume_size: 20
      instance: "{{item.id}}"
      region: "{{region}}"
    with_items: ec2.instances
    register: ec2_volumes

  - name: Add tags to volumes
    ec2_tag:
      resource: "{{item.volume_id}}"
      region: "{{region}}"
      state: present
      tags:
        Name: "{{ lookup('env', 'USER') }}-{{ key_name }}"
    with_items: ec2_volumes.results

  - name: Create new ssh key-pair#generate a keylocally - this  will generate an error(ignored) if key exists... 
    shell: ssh-keygen -q -t rsa -N "" 
               -f {{ new_priv_key }}
    delegate_to: localhost
    ignore_errors: yes

  #name: add to controller ssh config #this is to prevent from interactive prompts for ssh
  #  shell: (echo Host {{item.public_ip}}; echo StrictHostKeyChecking no; echo UserKnownHostsFile=/dev/null) >> /etc/ssh/ssh_config
  #  with_items: ec2.instances
  #  sudo: yes

  - name: copy private ssh keys #copy the key over to ec2 - this asks for confirmation - fix that
    local_action: "command scp -rp3 {{ new_priv_key }} ubuntu@{{ hostvars.localhost.ec2.instances[0].public_dns_name }}:./.ssh/id_rsa"
    sudo: no

  - name: copy public ssh keys #copy the key over to ec2 workers
    local_action: "command scp -rp3 {{ new_pub_key }} ubuntu@{{ item.public_dns_name }}:./.ssh/id_rsa.pub"
    with_items: ec2.instances
    sudo: no


#Prepare worker environment
- name: Configure workers
  hosts: nodes    
  remote_user: ubuntu
  sudo: yes
  gather_facts: false

  vars:
    database_name: myria
    database_username: uwdb # Myria currently requires a postgres user named 'uwdb'
    database_password: uwdb # TODO: Fix me :(
    postgres_version: 9.3
    new_pub_key: ~/.ssh/id_rsa.pub
    myria_path: /mnt/myria #TODO duplicated in the coordinator section 

  tasks:
  - name: Add key to authorized key #use shell rather than auth key module.
    shell: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
    sudo: no

  - name: disable ssh host key checking # this is excessive, fix this to be restricted to the list of IPs deployed
    shell: (echo Host *; echo StrictHostKeyChecking no; echo UserKnownHostsFile=/dev/null) >> /etc/ssh/ssh_config
    sudo: yes

  - name: Installing packages
    apt: name="{{item}}" update_cache=yes
    with_items:
      - postgresql-{{postgres_version}}
      - libpq-dev
      - python-psycopg2
      - git
      - openjdk-7-jre
      - openjdk-7-jdk
      - libxml2-dev
      - libxslt1-dev
      - python-dev

  - name: Update Postgres listeners
    lineinfile: dest=/etc/postgresql/{{postgres_version}}/main/postgresql.conf
                  regexp="^listen_addresses"
                  line="listen_addresses = '*'" state=present
                  backup=yes
    lineinfile: dest=/etc/postgresql/{{postgres_version}}/main/pg_hba.conf
                  line="host    all   all        0.0.0.0/0   md5" state=present
                  backup=yes

  - name: Create database instance
    postgresql_db: name={{database_name}}
    become_user: postgres

  - name: Create database user
    postgresql_user: db={{database_name}} name={{database_username}} password={{database_password}} priv=ALL
    become_user: postgres

  - name: Create Myria group
    group: name=myria state=present

  - name: Create worker directory
    file: path={{myria_path}} state=directory owner=ubuntu group=myria mode=0775

# Prepare coordinator environment
- name: Configure coordinator
  hosts: coordinators
  remote_user: ubuntu
  sudo: yes
  gather_facts: false

  vars:
    myria_repository_url: https://github.com/uwescience/myria.git
    myria_path: /mnt/myria
    myria_branch: master
    rest_port: 8753
    coordinator_port: 8001
    worker_base_port: 9001
    database_password: uwdbuwdb # TODO fix me :(

  tasks:
    - name: Clone Myria repository
      sudo: no
      git: repo="{{myria_repository_url}}"
           dest="{{myria_path}}"
           version="{{myria_branch}}"

    - name: Compile
      shell: "./gradlew jar"
      sudo: no
      args:
        chdir: "{{myria_path}}"
        creates: "{{myria_path}}/build/libs"

    - name: Create deployment configuration file
      shell: "./create_deployment.py {{myria_path}} {{ groups['coordinator_name'] | join(' ') }} \
                                                    {{ groups['worker_names'] | join(' ') }} \
                                                    --rest-port {{rest_port}} \
                                                    --coordinator-port {{coordinator_port}} \
                                                    --worker-base-port {{worker_base_port}} \
                                                    --database-password {{database_password}} \
                > {{myria_path}}/myriadeploy/deployment.ec2.config"
      sudo: no
      args:
        chdir: "{{myria_path}}/myriadeploy"
        creates: "{{myria_path}}/myriadeploy/deployment.ec2.config"

    - name: Begin cluster setup  
      shell: "./setup_cluster.py deployment.ec2.config"
      sudo: no
      args:
        chdir: "{{myria_path}}/myriadeploy"
        creates: "{{myria_path}}/myria/master"

    - name: Launch cluster # this is failing right now, need to puch some holes in the filewall so master-worker can talk
      shell: "./launch_cluster.sh deployment.ec2.config \
               --clean-catalog"
      sudo: no
      args:
        chdir: "{{myria_path}}/myriadeploy"

    - name: list the name of master for ssh purposes.
      debug: msg="ssh to master by using public ip - {{play_hosts}}, and user - ubuntu"
